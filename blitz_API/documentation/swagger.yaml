openapi: '3.0.2'
info:
  title: BLITZ APP
  version: '1.0'
servers:
  - url: http://localhost:3000/api/v1
tags:
  - name: Auth
    description: Authentication methods
  - name: Menu
    description: Restaurant menu API methods
  - name: Address
    description: client adresses API
paths:
  /auth:
    post:
      tags:
       - Auth
      summary: Authentication
      description: Authentication requestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authResp'
  /address/create:
    post:
      tags:
        - Address
      summary: Create
      description: Create address
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/addressCreate'
      security:
        - BearerToken: []
      responses:
        '200':
          description: Successful operation
  /address/update={id}:
    put:
      tags:
        - Address
      summary: Update
      description: Update Address field
      parameters:
        -
          name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addressUpdate'
      security:
        - BearerToken: []
      responses:
        '200':
          description: Successful operation
  /address:
    get:
      tags:
        - Address
      summary: Read
      description: Get all addresses by user id   
      security:
        - BearerToken: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAddresses'
  /address/delete={id}:
    delete:
      tags:
        - Address
      summary: Read
      description: Get all addresses by user id
      parameters:
        -
          name: id
          in: path
          schema:
            type: string
          required: true
          description: address id
      security:
        - BearerToken: []
      responses:
        '200':
          description: Successful operation
  /menu:
    get:
      tags: 
        - Menu
      summary: get menu items
      description: get all menu items
      security:
        - BearerToken: []
      responses:
        '200': 
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMenu'
              example: 
                msg: 'OK'
                data: 
                  -
                    category_id: 'hen7UfMh4Z3yE14Bexk9' 
                    description: 'Arroz cremoso con mix de mariscos.'
                    dish_name: 'Arroz marinero'
                    label_img: 'link here'
                    price: 30000
  /menu/update={id}:
    put:
      tags:
        - Menu
      summary: update menu item
      description: update menu item by id
      security:
        - BearerToken: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          description: dish id
        - name: rol
          in: header
          schema:
            type: number
          required: true
          description: this operation needs admin rol (1) given by token
          example: 1
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/putBody'
      responses: 
        '201':
          description: Successful operation
  /menu/create:
    post:
      tags:
        - Menu
      summary: Create new menu item
      description: Create new menu item
      parameters:
        - name: rol
          in: header
          schema:
            type: number
          required: true
          description: this operation needs admin rol (1) given by token
          example: 1
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createBody'
            example:
              category_id: 'hen7UfMh4Z3yE14Bexk9' 
              description: 'Arroz cremoso con mix de mariscos.'
              dish_name: 'Arroz marinero'
              label_img: 'link here'
              price: 30000
      responses:
        '201':
          description: Successful operation
  /menu/delete={id}:
    delete:
      tags:
        - Menu
      summary: delete menu item
      description: delete menu item by id
      security:
        - BearerToken: []
      parameters:
        -
          name: id
          in: path
          schema:
            type: string
          required: true
          description: dish id
        - name: rol
          in: header
          schema:
            type: number
          required: true
          description: this operation needs admin rol (1) given by token
          example: 1
      responses:
        '201':
          description: Successful operation
components:
  schemas:
    authBody:
      $ref: 'auth/body.yaml'
    authResp:
      $ref: 'auth/post.yaml'
    getMenu:
      $ref: 'menu/get.yaml'
    putBody:
      $ref: 'menu/put.yaml'
    createBody:
      $ref: 'menu/create.yaml'
    addressCreate:
      $ref: 'address/create.yaml'
    addressUpdate:
      $ref: 'address/update.yaml'
    getAddresses:
      $ref: 'address/get.yaml'
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer

